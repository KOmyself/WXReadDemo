
fastlane_version "2.37.0"

default_platform :ios

# 工程信息
APP_NAME = 'WXReadDemo'
SCHEME_NAME = 'WXReadDemo'
PROJECT_FILE_PATH = 'WXReadDemo.xcodeproj'

# 证书信息
ADHOC_IDENTIFIER = 'com.systoon.test'
ADHOC_CODESIGNING_IDENTITY = 'iPhone Distribution: hutong syswin (YQ3XSED2BZ)'

APPSTORE_IDENTIFIER = 'com.systoon.test'
APPSTORE_CODESIGNING_IDENTITY = 'iPhone Distribution: hutong syswin (YQ3XSED2BZ)'

ENTERPRISE_IDENTIFIER = 'com.systoon.enterprise.jiaoyutong'
ENTERPRISE_CODESIGNING_IDENTITY = 'iPhone Distribution: Beijing Syswin Internet Technology Co. Ltd.'

# Info.plist文件位置
PLIST_FILE_PATH = 'WXReadDemo/Info.plist'

# 更新bundle id
def update_app_bundle(bundle)
  
    update_app_identifier(
        xcodeproj: PROJECT_FILE_PATH,
        plist_path: PLIST_FILE_PATH,
        app_identifier: bundle
    )
  
end

# 更新版本号
def prepare_version(options)

    # 增加版本号
    increment_version_number(

        version_number: options[:version],
        xcodeproj: PROJECT_FILE_PATH
    )

    # 增加build号  只能是整数和浮点数
    increment_build_number(

        build_number: options[:build],
        xcodeproj: PROJECT_FILE_PATH
    )

end

# 修改provision file
def update_provision(typePrefix)
  
   update_project_provisioning(

       xcodeproj: PROJECT_FILE_PATH,
       profile: "./fastlane/provision/#{typePrefix}.mobileprovision"
   )
  
end

# 设置Info_plist_value里的值
def set_info_plist_value(path,key,value)

  sh "/usr/libexec/PlistBuddy -c \"set :#{key} #{value}\" ../#{path}"
    
end

# 设置渠道信息
def set_channel_id(channelId)

   set_info_plist_value(

      "#{PLIST_FILE_PATH}",
      "ChannelID",
      "#{channelId}"
   )

end

# 打包
def generate_ipa(typePrefix,codesigningIdentity,exportMethod,options)
    #say 'generate ipa'

    #fullVersion = options[:version] + '.' + options[:build]
    #channelId = options[:channel_id]

    time = Time.new.strftime("%Y-%m-%d-%H:%M:%S")

    gym(
      scheme: SCHEME_NAME,
      clean: true,
      output_directory: './build/',
      output_name: time,
      configuration: 'Release',
      codesigning_identity: "#{codesigningIdentity}",
      include_symbols: 'false',
      include_bitcode: 'true',
      provisioning_profile_path: "./fastlane/provision/#{typePrefix}.mobileprovision",
      archive_path: './build/',
      export_method: "#{exportMethod}”
    )
end

platform :ios do

  before_all do
    # ENV["SLACK_URL"] = "https://hooks.slack.com/services/..."
    
  end

  desc "Runs all the tests"
  lane :test do
    scan
  end

  desc "打AdHoc包"
  lane :Archive_AdHoc do |options|

    typePrefix = 'TestAdHoc'
    # set_channel_id(typePrefix)
    prepare_version(options)
    update_app_bundle("#{ADHOC_IDENTIFIER}")
    update_provision(typePrefix)

    generate_ipa(typePrefix,"#{ADHOC_CODESIGNING_IDENTITY}","ad-hoc",options)

  end

  desc "打AppStore包"
  lane :Archive_AppStore do |options|

    typePrefix = 'TestDistribution'
    # set_channel_id(typePrefix)
    prepare_version(options)
    update_app_bundle("#{APPSTORE_IDENTIFIER}")
    update_provision(typePrefix)

    generate_ipa(typePrefix,"#{APPSTORE_CODESIGNING_IDENTITY}","app-store",options)

  end

  desc "打企业包"
  lane :Archive_Enterprise do |options|

    typePrefix = 'TestEnterprise'
    prepare_version(options)
    update_app_bundle("#{ENTERPRISE_IDENTIFIER}")
    update_provision(typePrefix)

    generate_ipa(typePrefix,"#{ENTERPRISE_CODESIGNING_IDENTITY}","enterprise",options)

  end

  # You can define as many lanes as you want

  after_all do |lane|
    # This block is called, only if the executed lane was successful

    # slack(
    #   message: "Successfully deployed new App Update."
    # )
  end

  error do |lane, exception|
    # slack(
    #   message: exception.message,
    #   success: false
    # )
  end
end
